#!/bin/bash

type=$1; shift

if [ "$type" = '--outcome' ] || [ "$type" = '-o' ]
then
	./bostonAlgr "$@" | ./outcome
elif [ "$type" = '--priority' ] || [ "$type" = '-p' ]
then
	wanted=$1; shift
	test -z "$wanted" && wanted=50
	num_of_iters=$1; shift

	out_dir="out/$(date +%Y-%m-%d-%H-%M-%S)"
	mkdir -p "$out_dir"
	seq "$num_of_iters" | while read num
	do
		./gendta2 ${@--i 1000 -s 5 -w 50 -a 2} >&2
		./bostonAlgr > boston.out
		awk -v OFS='\t' -v wanted="$wanted" '
			BEGIN {
				print "# Priority", "+/-", "Count"
			}
			/^#/ { next }
			NR == FNR {
				stud[$1] = ++total
				next
			}
			{
				gpa = total * (wanted / 100) >= stud[$2] ? 1 : 0 # 1 = +, 0 = -
				a[$3"_"gpa]++
				max_priv = max_priv > $3 ? max_priv : $3
			}
			END {
				for (i = 0; i <= max_priv; i++ ) {
					for (y = 0; y <= 1; y++) {
						print (i + 1), (y ? "+" : "-"), a[i"_"y]
					}
				}
			}
		' masterPrefList.txt boston.out > priority.out

		cp schools.txt "$out_dir/schools_$num.csv"
		cp priority.out "$out_dir/priority_$num.csv"
		cp students.txt "$out_dir/students_$num.csv"
		cp boston.out "$out_dir/boston_$num.csv"
		cp masterPrefList.txt "$out_dir/master_$num.csv"
		./stats < boston.out > "$out_dir/stats_$num.csv"
	done

	seq "$num_of_iters" | while read num
	do
		cat "$out_dir/priority_$num.csv"
	done > "$out_dir/priority.csv"

	seq "$num_of_iters" | while read num
	do
		cat "$out_dir/stats_$num.csv"
	done > "$out_dir/stats.csv"
elif [ "$type" = '--stats' ] || [ "$type" = '-s' ]
then
	./bostonAlgr "$@" | ./stats
elif [ "$type" = '--boston' ] || [ "$type" = '-b' ]
then
	./bostonAlgr "$@"
elif [ "$type" = '--generate' ] || [ "$type" = '-g' ]
then
	num_of_iters=$1; shift

	seq "$num_of_iters" | while read num
	do
		./gendta2 ${@--i 1000 -s 5 -w 50 -a 2} >&2
		./bostonAlgr | tee >(sort -k1n -k2n > boston.out) | ./stats | tee /dev/stderr
	done | awk 'NR == 1 || !/ID/' > out_min.csv
else
	>&2 printf 'Usage: %s { --outcome | --priority WANTED | --stats | --boston | --generate ITER }\n' "${0}"
	exit 1
fi
